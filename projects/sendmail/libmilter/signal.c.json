{"project":"sendmail","module":"..\/working\/sendmail\/libmilter\/signal.c","summary":"This module handles signal processing for the libmilter library in sendmail. It creates and manages a separate thread to handle signals like SIGHUP, SIGTERM, and SIGINT, enabling clean shutdown of milter processes.","logs":[{"function":"mi_signal_thread","message_template":"%s: sigwait returned error: %d","reason":"Logged when the sigwait function fails with an error. This could happen due to system resource issues or signal handling problems.","resolution":"Check system resources and signal configurations. If errors persist, consider restarting the sendmail service or checking for OS-specific signal handling issues."},{"function":"mi_signal_thread","message_template":"%s: sigwait returned unmasked signal: %d","reason":"Logged when sigwait receives a signal that wasn't expected to be in the signal mask, indicating a potential issue with signal handling.","resolution":"This could indicate a programming error or OS-specific signal handling issue. Check for modifications to the signal mask by other parts of the application or consider upgrading to a newer version if this occurs frequently."},{"function":"mi_spawn_signal_thread","message_template":"%s: Couldn't mask HUP and KILL signals","reason":"Logged when the application fails to mask SIGHUP, SIGTERM, and SIGINT signals, which is necessary for proper signal thread operation.","resolution":"This could be due to insufficient permissions or system resource issues. Check process permissions and consider restarting the service with appropriate privileges."},{"function":"mi_spawn_signal_thread","message_template":"%s: Couldn't start signal thread: %d","reason":"Logged when the application fails to create a new thread for signal handling, preventing proper shutdown handling.","resolution":"Check system thread limits and available memory. This could occur on heavily loaded systems or systems with tight resource constraints. Consider increasing thread limits or reducing other resource usage."},{"function":"mi_control_startup","message_template":"%s: Couldn't initialize control pipe mutex","reason":"Logged when the application fails to initialize the mutex needed for thread synchronization, which could lead to race conditions.","resolution":"This is typically a system resource issue. Check available memory and system limits for mutexes. On some systems, you may need to adjust kernel parameters related to IPC resources."},{"function":"mi_control_startup","message_template":"%s: Couldn't spawn signal thread","reason":"Logged when the application fails to start the signal handler thread after initial setup, preventing proper signal handling.","resolution":"This is a secondary error that occurs after another failure in spawning the signal thread. Check previous error messages for the root cause and address those issues first."}]}