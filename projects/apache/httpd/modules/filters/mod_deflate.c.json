{"module":"mod_deflate.c","summary":"Apache's mod_deflate module provides HTTP content compression\/decompression using zlib. It handles gzip compression for responses, decompression for requests, and manages content-encoding headers with validation of compressed data.","logs":[{"function":"deflate_out_filter","message_template":"Compression enabled at SSL level; not compressing at HTTP level.","reason":"The module detected that SSL compression is already enabled, so HTTP-level compression would be redundant and inefficient.","resolution":"This is an informational message. If you want HTTP-level compression, disable SSL compression."},{"function":"deflate_out_filter","message_template":"Not compressing very small response of %APR_SIZE_T_FMT bytes","reason":"The response is too small to benefit from compression; compressing would add overhead rather than save bandwidth.","resolution":"This is informational. For very small responses, compression is skipped to avoid unnecessary overhead."},{"function":"deflate_out_filter","message_template":"Not compressing (%s)","reason":"Compression is skipped for one of several reasons: subrequest, no content, no-gzip environment variable, or content-range header present.","resolution":"If compression is desired, ensure the conditions preventing compression are addressed, like removing the no-gzip environment variable if appropriate."},{"function":"deflate_out_filter","message_template":"Not compressing, (gzip-only-text\/html)","reason":"Compression is skipped because the gzip-only-text\/html option is set and the content is not text\/html.","resolution":"If you want to compress non-HTML content types, remove the gzip-only-text\/html setting or adjust your BrowserMatch directives."},{"function":"deflate_out_filter","message_template":"Not compressing (content-encoding already set: %s)","reason":"The content is already encoded with a non-identity encoding, so additional compression is skipped to avoid double-encoding.","resolution":"If compression is desired, ensure there are no other content encodings applied elsewhere."},{"function":"deflate_out_filter","message_template":"Not compressing (no Accept-Encoding: gzip or q=0)","reason":"The client's request does not include 'gzip' in the Accept-Encoding header or has q-value of 0, indicating it cannot handle compressed responses.","resolution":"This is normal behavior based on client capabilities. No action needed unless you're troubleshooting why specific clients aren't receiving compressed content."},{"function":"deflate_out_filter","message_template":"Forcing compression (force-gzip set)","reason":"Compression is being forced even if the client does not indicate support for it, because force-gzip environment variable is set.","resolution":"This might cause issues with clients that don't support compression. Use force-gzip with caution."},{"function":"deflate_out_filter","message_template":"unable to init Zlib: deflateInit2 returned %d: URL %s","reason":"Failed to initialize the zlib compression library, which is required for compression operations.","resolution":"This is likely due to memory constraints or a problem with the zlib library. Verify server memory is adequate and zlib is properly installed."},{"function":"deflate_out_filter","message_template":"Zlib: Compressed %APR_UINT64_T_FMT to %APR_UINT64_T_FMT : URL %s","reason":"Debug information showing original and compressed sizes for a response, indicating successful compression.","resolution":"Informational log, no resolution required. Useful for monitoring compression effectiveness."},{"function":"deflate_out_filter","message_template":"Zlib error %d flushing zlib output buffer (%s)","reason":"An error occurred while attempting to flush compressed data from the zlib buffer.","resolution":"This indicates a problem with the zlib library or memory constraints. Verify memory availability and zlib installation."},{"function":"deflate_out_filter","message_template":"failed reading from %s bucket","reason":"Failed to read data from a specified bucket in the filter chain, which is needed for compression.","resolution":"This could indicate a network issue or a problem with an upstream filter. Check network connectivity and review other error logs for related issues."},{"function":"deflate_out_filter","message_template":"Zlib error %d deflating data (%s)","reason":"An error occurred during the actual compression (deflate) operation in zlib.","resolution":"This could be due to corrupted input data, memory constraints, or zlib issues. Check memory availability and verify input data integrity."},{"function":"deflate_in_filter","message_template":"Encountered premature end-of-stream while reading inflate header","reason":"The compressed input stream ended unexpectedly before a complete gzip header could be read.","resolution":"This suggests corrupted or truncated input data. Verify the client is sending complete, properly formatted compressed data."},{"function":"deflate_in_filter","message_template":"Encountered premature end-of-stream while inflating","reason":"The compressed input stream ended unexpectedly before decompression was complete.","resolution":"This suggests corrupted or truncated input data. Verify the client is sending complete, properly formatted compressed data."},{"function":"deflate_in_filter","message_template":"Zlib error %d inflating data (%s)","reason":"An error occurred during the decompression (inflate) operation in zlib.","resolution":"This could be due to corrupted input data, memory constraints, or zlib issues. Verify the client is sending valid compressed data."},{"function":"deflate_in_filter","message_template":"Inflated content length of %APR_OFF_T_FMT is larger than the configured limit of %APR_OFF_T_FMT","reason":"The decompressed data exceeds the configured size limit, which could indicate a compression bomb attack.","resolution":"If legitimate large data transfers are expected, increase the DeflateInflateLimitRequestBody setting. Otherwise, investigate potential DoS attacks."},{"function":"deflate_in_filter","message_template":"Inflated content ratio is larger than the configured limit %i by %i time(s)","reason":"The ratio of decompressed to compressed data exceeds limits, which could indicate a compression bomb attack.","resolution":"If legitimate high-compression data is expected, adjust DeflateInflateRatioLimit and DeflateInflateRatioBurst. Otherwise, investigate potential DoS attacks."},{"function":"deflate_in_filter","message_template":"Zlib: Inflated %APR_UINT64_T_FMT to %APR_UINT64_T_FMT : URL %s","reason":"Debug information showing compressed and decompressed sizes for a request, indicating successful decompression.","resolution":"Informational log, no resolution required. Useful for monitoring decompression operations."},{"function":"deflate_in_filter","message_template":"Zlib: CRC error inflating data","reason":"The CRC checksum of the decompressed data does not match the checksum in the compressed stream, indicating data corruption.","resolution":"This suggests corrupted data during transmission. Check for network issues or client-side compression problems."},{"function":"deflate_in_filter","message_template":"Zlib: Length %APR_UINT64_T_FMT of inflated data does not match expected value %ld","reason":"The decompressed data length doesn't match the length stored in the gzip footer, indicating data corruption or truncation.","resolution":"This suggests data integrity issues. Check for network problems or issues with the client's compression implementation."},{"function":"deflate_in_filter","message_template":"Encountered extra data after compressed data","reason":"Additional data was found after the end of the compressed data stream, indicating potential data corruption or malformed input.","resolution":"Verify the client is sending properly formatted compressed data without extraneous content."},{"function":"inflate_out_filter","message_template":"Zlib: Invalid header","reason":"The gzip header in the compressed stream is invalid or corrupted.","resolution":"This suggests the upstream server sent malformed compressed data. Check the origin server's compression settings."},{"function":"inflate_out_filter","message_template":"Zlib: Invalid flags %02x","reason":"The flags in the gzip header contain reserved bits or invalid combinations.","resolution":"This suggests the upstream server sent malformed compressed data. Check the origin server's compression implementation."},{"function":"inflate_out_filter","message_template":"unable to init Zlib: inflateInit2 returned %d: URL %s","reason":"Failed to initialize the zlib decompression library for a response.","resolution":"This is likely due to memory constraints or a problem with the zlib library. Verify server memory and zlib installation."},{"function":"inflate_out_filter","message_template":"Zlib: Checksum of inflated stream invalid","reason":"The CRC checksum verification failed after decompressing a response, indicating data corruption.","resolution":"This suggests the upstream server sent corrupted compressed data. Check the origin server and network integrity."},{"function":"inflate_out_filter","message_template":"Zlib: Length of inflated stream invalid","reason":"The decompressed length does not match the expected length stored in the gzip footer.","resolution":"This suggests the upstream server sent corrupted or truncated compressed data. Check the origin server."},{"function":"inflate_out_filter","message_template":"Zlib: Validation bytes not present","reason":"The compressed stream is missing the validation bytes (CRC and length) that should be present at the end.","resolution":"This suggests truncated data from the upstream server. Check the origin server and network integrity."},{"function":"inflate_out_filter","message_template":"Zlib error %d flushing inflate buffer (%s)","reason":"An error occurred while attempting to flush decompressed data from the zlib buffer.","resolution":"This indicates a problem with the zlib library or corrupted input data. Check memory and data integrity."},{"function":"inflate_out_filter","message_template":"inflate: data not deflated!","reason":"The input stream claims to be compressed but does not use the DEFLATE compression method.","resolution":"Check if the upstream server is using a different compression algorithm or incorrectly setting Content-Encoding headers."},{"function":"inflate_out_filter","message_template":"inflate: bad header","reason":"The gzip header magic bytes are incorrect, indicating the data is not in gzip format.","resolution":"Verify the upstream server is actually sending gzip-compressed data or is correctly setting Content-Encoding headers."},{"function":"inflate_out_filter","message_template":"inflate: bad flags %02x","reason":"The flags in the gzip header contain invalid or reserved bits.","resolution":"This suggests the upstream server is sending malformed gzip data. Check the origin server's compression implementation."},{"function":"inflate_out_filter","message_template":"Zlib: %d bytes of garbage at the end of compressed stream.","reason":"Additional bytes were found after the end of the valid compressed data.","resolution":"This is usually a warning; the extra data is ignored. Check if the upstream server is incorrectly appending data to compressed responses."},{"function":"deflate_set_window_size","message_template":"DeflateWindowSize must be between 1 and 15","reason":"The DeflateWindowSize configuration directive was given a value outside the allowed range.","resolution":"Adjust the DeflateWindowSize directive in your Apache configuration to be between 1 and 15. Larger values provide better compression but use more memory."},{"function":"deflate_set_buffer_size","message_template":"DeflateBufferSize should be positive","reason":"The DeflateBufferSize configuration directive was given a non-positive value.","resolution":"Adjust the DeflateBufferSize directive in your Apache configuration to be a positive integer representing the buffer size in bytes."},{"function":"deflate_set_note","message_template":"Unknown note type %s","reason":"The DeflateFilterNote directive was given an unknown note type parameter.","resolution":"Use only recognized note types with DeflateFilterNote: 'ratio', 'input', or 'output'."},{"function":"deflate_set_memlevel","message_template":"DeflateMemLevel must be between 1 and 9","reason":"The DeflateMemLevel configuration directive was given a value outside the allowed range.","resolution":"Adjust the DeflateMemLevel directive in your Apache configuration to be between 1 and 9. Higher values use more memory but potentially better compression."},{"function":"deflate_set_etag","message_template":"DeflateAlterETAG accepts only 'NoChange', 'AddSuffix', and 'Remove'","reason":"The DeflateAlterETag directive was given an unrecognized value.","resolution":"Use only one of the three allowed values: 'NoChange', 'AddSuffix', or 'Remove' for the DeflateAlterETag directive."},{"function":"deflate_set_compressionlevel","message_template":"Compression Level must be between 1 and 9","reason":"The DeflateCompressionLevel configuration directive was given a value outside the allowed range.","resolution":"Adjust the DeflateCompressionLevel directive in your Apache configuration to be between 1 and 9. Higher values give better compression but slower performance."},{"function":"deflate_set_inflate_limit","message_template":"DeflateInflateLimitRequestBody is not parsable.","reason":"The DeflateInflateLimitRequestBody directive value could not be parsed as a number.","resolution":"Provide a valid numeric value for the DeflateInflateLimitRequestBody directive."},{"function":"deflate_set_inflate_limit","message_template":"DeflateInflateLimitRequestBody requires a non-negative integer.","reason":"The DeflateInflateLimitRequestBody directive was given a negative value.","resolution":"Provide a non-negative integer value for the DeflateInflateLimitRequestBody directive."},{"function":"deflate_set_inflate_ratio_limit","message_template":"DeflateInflateRatioLimit must be positive","reason":"The DeflateInflateRatioLimit configuration directive was given a non-positive value.","resolution":"Provide a positive integer for the DeflateInflateRatioLimit directive to set the maximum allowed ratio of decompressed to compressed data."},{"function":"deflate_set_inflate_ratio_burst","message_template":"DeflateInflateRatioBurst must be positive","reason":"The DeflateInflateRatioBurst configuration directive was given a non-positive value.","resolution":"Provide a positive integer for the DeflateInflateRatioBurst directive to set how many times the ratio limit can be exceeded."}],"project":"apache\/httpd"}