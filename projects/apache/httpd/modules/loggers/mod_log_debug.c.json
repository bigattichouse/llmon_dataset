{"module":"mod_log_debug.c","summary":"The log_debug_module extends Apache's logging capabilities by allowing administrators to configure custom debug messages that can be triggered at specific request processing hooks. It supports conditional logging based on expressions and provides detailed context about where the log message originated.","logs":[{"function":"do_debug_log","message_template":"Can't evaluate condition: %s","reason":"Logs an error when a condition expression specified in a LogMessage directive cannot be evaluated. This typically occurs due to syntax errors or references to undefined variables in the expression.","resolution":"Review the condition expression in your LogMessage directive for syntax errors. Check if all variables used in the expression are properly defined and accessible in the request context."},{"function":"do_debug_log","message_template":"Can't evaluate message expression: %s","reason":"Logs an error when the message part of a LogMessage directive cannot be evaluated. This happens when there are issues with the message expression syntax or variables.","resolution":"Check the message expression in your LogMessage directive for proper syntax. Ensure all variables used in the expression exist in the request context."},{"function":"do_debug_log","message_template":"%s (%s hook, %s:%d)","reason":"Logs a debug message with additional context information showing the hook name, filename, and line number where the message was defined. This appears only when detailed debugging is enabled.","resolution":"Informational log, no resolution required. If receiving too many of these messages, consider adjusting your LogMessage directives or debug level settings."},{"function":"do_debug_log","message_template":"%s","reason":"Logs a simple debug message without additional context. This is the standard format for debug messages when detailed debugging is not enabled.","resolution":"Informational log, no resolution required. If receiving too many of these messages, consider adjusting your LogMessage directives."},{"function":"cmd_log_message","message_template":"Could not parse message expression '%s': %s","reason":"Returned when a message expression in a LogMessage directive cannot be parsed. This error occurs during server configuration processing, not at runtime.","resolution":"Fix the syntax of the message expression in your LogMessage directive. Check for missing quotes, unbalanced parentheses, or other syntax issues. The error message should provide specific details about the parsing failure."},{"function":"cmd_log_message","message_template":"Invalid hook name: %s","reason":"Returned when an invalid hook name is specified in a LogMessage directive. The hook name must be one of the predefined values or '*'.","resolution":"Use one of the valid hook names: 'log_transaction', 'quick_handler', 'handler', 'translate_name', 'map_to_storage', 'fixups', 'type_checker', 'check_access', 'check_access_ex', 'check_authn', 'check_authz', 'insert_filter', 'pre_translate_name', or '*' (or 'all') for all hooks."},{"function":"cmd_log_message","message_template":"Could not parse expression '%s': %s","reason":"Returned when a condition expression in a LogMessage directive cannot be parsed. This error occurs during server configuration processing.","resolution":"Fix the syntax of the condition expression in your LogMessage directive. Check for missing quotes, unbalanced parentheses, or other syntax errors. The error message should provide specific details about the parsing failure."},{"function":"cmd_log_message","message_template":"Invalid argument %s","reason":"Returned when an unknown or malformed argument is provided to the LogMessage directive. Arguments must start with 'hook=' or 'expr='.","resolution":"Check the arguments in your LogMessage directive. Valid formats are 'hook=hookname' and 'expr=condition'. Remove or correct any invalid arguments."}],"project":"apache\/httpd"}